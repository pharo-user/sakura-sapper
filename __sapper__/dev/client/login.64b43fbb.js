import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, y as onMount, z as globals, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, j as add_location, k as attr_dev, l as insert_dev, m as append_dev, A as set_input_value, B as listen_dev, n as noop, C as run_all } from './client.c8808cd1.js';

async function doLogin(email, password) {

  let url = "https://sakura.eco/api/user/login";
  let data = { 'email' : email, 'password' : password };

  return await fetch( url , {
      mode: 'cors',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    })
    .then((r) => r.json())
      .then((d) => {
          return d;
        })
}

async function doGetArticles(id) {

  let url = "https://sakura.eco/api/widget/articles/"+id;

  return await fetch( url , {
      mode: 'cors' })
    .then((r) => r.json())
      .then((d) => {
          return d;
        })
}

/* src/routes/login.svelte generated by Svelte v3.38.3 */

const { console: console_1 } = globals;
const file = "src/routes/login.svelte";

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let input0;
	let t3;
	let input1;
	let t4;
	let button;
	let t5;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("CONNECT TO SAKURA.ECO");
			t2 = space();
			input0 = element("input");
			t3 = space();
			input1 = element("input");
			t4 = space();
			button = element("button");
			t5 = text("Sign In");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ine71f\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "CONNECT TO SAKURA.ECO");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			input0 = claim_element(nodes, "INPUT", { placeholder: true });
			t3 = claim_space(nodes);
			input1 = claim_element(nodes, "INPUT", { placeholder: true });
			t4 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t5 = claim_text(button_nodes, "Sign In");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
			add_location(h1, file, 21, 0, 341);
			attr_dev(input0, "placeholder", "enter your email");
			add_location(input0, file, 22, 0, 372);
			attr_dev(input1, "placeholder", "enter your password");
			add_location(input1, file, 23, 0, 430);
			add_location(button, file, 25, 0, 495);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, input0, anchor);
			set_input_value(input0, /*email*/ ctx[0]);
			insert_dev(target, t3, anchor);
			insert_dev(target, input1, anchor);
			set_input_value(input1, /*password*/ ctx[1]);
			insert_dev(target, t4, anchor);
			insert_dev(target, button, anchor);
			append_dev(button, t5);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[3]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[4]),
					listen_dev(button, "click", /*login*/ ctx[2], { once: true }, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*email*/ 1 && input0.value !== /*email*/ ctx[0]) {
				set_input_value(input0, /*email*/ ctx[0]);
			}

			if (dirty & /*password*/ 2 && input1.value !== /*password*/ ctx[1]) {
				set_input_value(input1, /*password*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(input0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(input1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Login", slots, []);
	let email = "";
	let password = "";

	function login() {
		console.log("login");
		let r = doLogin(email, password);
		console.log(r);
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Login> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		email = this.value;
		$$invalidate(0, email);
	}

	function input1_input_handler() {
		password = this.value;
		$$invalidate(1, password);
	}

	$$self.$capture_state = () => ({
		doLogin,
		doGetArticles,
		onMount,
		email,
		password,
		login
	});

	$$self.$inject_state = $$props => {
		if ("email" in $$props) $$invalidate(0, email = $$props.email);
		if ("password" in $$props) $$invalidate(1, password = $$props.password);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [email, password, login, input0_input_handler, input1_input_handler];
}

class Login extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Login",
			options,
			id: create_fragment.name
		});
	}
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uNjRiNDNmYmIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvX2xvZ2luLmpzIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9sb2dpbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvTG9naW4oZW1haWwsIHBhc3N3b3JkKSB7XG5cbiAgbGV0IHVybCA9IFwiaHR0cHM6Ly9zYWt1cmEuZWNvL2FwaS91c2VyL2xvZ2luXCI7XG4gIGxldCBkYXRhID0geyAnZW1haWwnIDogZW1haWwsICdwYXNzd29yZCcgOiBwYXNzd29yZCB9O1xuXG4gIHJldHVybiBhd2FpdCBmZXRjaCggdXJsICwge1xuICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgIH0pXG4gICAgLnRoZW4oKHIpID0+IHIuanNvbigpKVxuICAgICAgLnRoZW4oKGQpID0+IHtcbiAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvR2V0QXJ0aWNsZXMoaWQpIHtcblxuICBsZXQgdXJsID0gXCJodHRwczovL3Nha3VyYS5lY28vYXBpL3dpZGdldC9hcnRpY2xlcy9cIitpZDtcblxuICByZXR1cm4gYXdhaXQgZmV0Y2goIHVybCAsIHtcbiAgICAgIG1vZGU6ICdjb3JzJyB9KVxuICAgIC50aGVuKChyKSA9PiByLmpzb24oKSlcbiAgICAgIC50aGVuKChkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH0pXG59XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBkb0xvZ2luIH0gZnJvbSAnLi9fbG9naW4nO1xuICBpbXBvcnQgeyBkb0dldEFydGljbGVzIH0gZnJvbSAnLi9fbG9naW4nO1xuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICBcbiAgbGV0IGVtYWlsID0gJyc7XG4gIGxldCBwYXNzd29yZCA9ICcnO1xuXG5cdGZ1bmN0aW9uIGxvZ2luKCkge1xuICAgIGNvbnNvbGUubG9nKCdsb2dpbicpO1xuICAgIGxldCByID0gZG9Mb2dpbihlbWFpbCwgcGFzc3dvcmQpXG4gICAgY29uc29sZS5sb2cocik7XG5cdH1cbjwvc2NyaXB0PlxuXG5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+QWJvdXQ8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPkNPTk5FQ1QgVE8gU0FLVVJBLkVDTzwvaDE+XG48aW5wdXQgYmluZDp2YWx1ZT17ZW1haWx9IHBsYWNlaG9sZGVyPVwiZW50ZXIgeW91ciBlbWFpbFwiPlxuPGlucHV0IGJpbmQ6dmFsdWU9e3Bhc3N3b3JkfSBwbGFjZWhvbGRlcj1cImVudGVyIHlvdXIgcGFzc3dvcmRcIj5cblxuPGJ1dHRvbiBvbjpjbGlja3xvbmNlPXtsb2dpbn0+XG5cdFNpZ24gSW5cbjwvYnV0dG9uPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQU8sZUFBZSxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtBQUMvQztBQUNBLEVBQUUsSUFBSSxHQUFHLEdBQUcsbUNBQW1DLENBQUM7QUFDaEQsRUFBRSxJQUFJLElBQUksR0FBRyxFQUFFLE9BQU8sR0FBRyxLQUFLLEVBQUUsVUFBVSxHQUFHLFFBQVEsRUFBRSxDQUFDO0FBQ3hEO0FBQ0EsRUFBRSxPQUFPLE1BQU0sS0FBSyxFQUFFLEdBQUcsR0FBRztBQUM1QixNQUFNLElBQUksRUFBRSxNQUFNO0FBQ2xCLE1BQU0sTUFBTSxFQUFFLE1BQU07QUFDcEIsTUFBTSxPQUFPLEVBQUU7QUFDZixRQUFRLGNBQWMsRUFBRSxrQkFBa0I7QUFDMUMsT0FBTztBQUNQLE1BQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2hDLEtBQUssQ0FBQztBQUNOLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMxQixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztBQUNuQixVQUFVLE9BQU8sQ0FBQyxDQUFDO0FBQ25CLFNBQVMsQ0FBQztBQUNWLENBQUM7QUFDRDtBQUNPLGVBQWUsYUFBYSxDQUFDLEVBQUUsRUFBRTtBQUN4QztBQUNBLEVBQUUsSUFBSSxHQUFHLEdBQUcseUNBQXlDLENBQUMsRUFBRSxDQUFDO0FBQ3pEO0FBQ0EsRUFBRSxPQUFPLE1BQU0sS0FBSyxFQUFFLEdBQUcsR0FBRztBQUM1QixNQUFNLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNyQixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUIsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDbkIsVUFBVSxPQUFPLENBQUMsQ0FBQztBQUNuQixTQUFTLENBQUM7QUFDVjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQ1BtQixHQUFLOzs7d0NBQ0wsR0FBUTs7Ozs7Ozs7OzJDQUVKLEdBQUs7Ozs7Ozs7eURBSFQsR0FBSztzQ0FBTCxHQUFLOzs7K0RBQ0wsR0FBUTt5Q0FBUixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FsQnJCLEtBQUssR0FBRyxFQUFFO0tBQ1YsUUFBUSxHQUFHLEVBQUU7O1VBRVQsS0FBSztFQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTztNQUNmLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVE7RUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0VBV0UsS0FBSzs7Ozs7RUFDTCxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
