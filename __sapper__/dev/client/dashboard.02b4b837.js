import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, a as space, f as claim_element, g as children, h as claim_text, b as detach_dev, c as claim_space, j as add_location, l as insert_dev, m as append_dev, n as noop, o as create_component, q as query_selector_all, p as claim_component, r as mount_component, u as transition_in, w as transition_out, x as destroy_component } from './client.c8808cd1.js';

/* src/components/Statistics.svelte generated by Svelte v3.38.3 */

const file$1 = "src/components/Statistics.svelte";

function create_fragment$1(ctx) {
	let h2;
	let t0;
	let t1;
	let table;
	let tr0;
	let th0;
	let t2;
	let t3;
	let td0;
	let t4;
	let t5;
	let tr1;
	let th1;
	let t6;
	let t7;
	let td1;
	let t8;
	let t9;
	let tr2;
	let th2;
	let t10;
	let t11;
	let td2;
	let t12;
	let t13;
	let tr3;
	let th3;
	let t14;
	let t15;
	let td3;
	let t16;

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("STATISTICS");
			t1 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t2 = text("VIEWS");
			t3 = space();
			td0 = element("td");
			t4 = text("385");
			t5 = space();
			tr1 = element("tr");
			th1 = element("th");
			t6 = text("CLICKS");
			t7 = space();
			td1 = element("td");
			t8 = text("11");
			t9 = space();
			tr2 = element("tr");
			th2 = element("th");
			t10 = text("REVENUES");
			t11 = space();
			td2 = element("td");
			t12 = text("0");
			t13 = space();
			tr3 = element("tr");
			th3 = element("th");
			t14 = text("ORDERS");
			t15 = space();
			td3 = element("td");
			t16 = text("0");
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "STATISTICS");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			table = claim_element(nodes, "TABLE", {});
			var table_nodes = children(table);
			tr0 = claim_element(table_nodes, "TR", {});
			var tr0_nodes = children(tr0);
			th0 = claim_element(tr0_nodes, "TH", {});
			var th0_nodes = children(th0);
			t2 = claim_text(th0_nodes, "VIEWS");
			th0_nodes.forEach(detach_dev);
			t3 = claim_space(tr0_nodes);
			td0 = claim_element(tr0_nodes, "TD", {});
			var td0_nodes = children(td0);
			t4 = claim_text(td0_nodes, "385");
			td0_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			t5 = claim_space(table_nodes);
			tr1 = claim_element(table_nodes, "TR", {});
			var tr1_nodes = children(tr1);
			th1 = claim_element(tr1_nodes, "TH", {});
			var th1_nodes = children(th1);
			t6 = claim_text(th1_nodes, "CLICKS");
			th1_nodes.forEach(detach_dev);
			t7 = claim_space(tr1_nodes);
			td1 = claim_element(tr1_nodes, "TD", {});
			var td1_nodes = children(td1);
			t8 = claim_text(td1_nodes, "11");
			td1_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			t9 = claim_space(table_nodes);
			tr2 = claim_element(table_nodes, "TR", {});
			var tr2_nodes = children(tr2);
			th2 = claim_element(tr2_nodes, "TH", {});
			var th2_nodes = children(th2);
			t10 = claim_text(th2_nodes, "REVENUES");
			th2_nodes.forEach(detach_dev);
			t11 = claim_space(tr2_nodes);
			td2 = claim_element(tr2_nodes, "TD", {});
			var td2_nodes = children(td2);
			t12 = claim_text(td2_nodes, "0");
			td2_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			t13 = claim_space(table_nodes);
			tr3 = claim_element(table_nodes, "TR", {});
			var tr3_nodes = children(tr3);
			th3 = claim_element(tr3_nodes, "TH", {});
			var th3_nodes = children(th3);
			t14 = claim_text(th3_nodes, "ORDERS");
			th3_nodes.forEach(detach_dev);
			t15 = claim_space(tr3_nodes);
			td3 = claim_element(tr3_nodes, "TD", {});
			var td3_nodes = children(td3);
			t16 = claim_text(td3_nodes, "0");
			td3_nodes.forEach(detach_dev);
			tr3_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file$1, 0, 0, 0);
			add_location(th0, file$1, 3, 0, 33);
			add_location(td0, file$1, 4, 0, 48);
			add_location(tr0, file$1, 2, 0, 28);
			add_location(th1, file$1, 7, 0, 72);
			add_location(td1, file$1, 8, 0, 88);
			add_location(tr1, file$1, 6, 0, 67);
			add_location(th2, file$1, 11, 0, 111);
			add_location(td2, file$1, 12, 0, 129);
			add_location(tr2, file$1, 10, 0, 106);
			add_location(th3, file$1, 15, 0, 151);
			add_location(td3, file$1, 16, 0, 167);
			add_location(tr3, file$1, 14, 0, 146);
			add_location(table, file$1, 1, 0, 20);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, table, anchor);
			append_dev(table, tr0);
			append_dev(tr0, th0);
			append_dev(th0, t2);
			append_dev(tr0, t3);
			append_dev(tr0, td0);
			append_dev(td0, t4);
			append_dev(table, t5);
			append_dev(table, tr1);
			append_dev(tr1, th1);
			append_dev(th1, t6);
			append_dev(tr1, t7);
			append_dev(tr1, td1);
			append_dev(td1, t8);
			append_dev(table, t9);
			append_dev(table, tr2);
			append_dev(tr2, th2);
			append_dev(th2, t10);
			append_dev(tr2, t11);
			append_dev(tr2, td2);
			append_dev(td2, t12);
			append_dev(table, t13);
			append_dev(table, tr3);
			append_dev(tr3, th3);
			append_dev(th3, t14);
			append_dev(tr3, t15);
			append_dev(tr3, td3);
			append_dev(td3, t16);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(table);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Statistics", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Statistics> was created with unknown prop '${key}'`);
	});

	return [];
}

class Statistics extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Statistics",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/dashboard.svelte generated by Svelte v3.38.3 */
const file = "src/routes/dashboard.svelte";

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let statistics;
	let current;
	statistics = new Statistics({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("SAKURA NETWORK");
			t2 = space();
			create_component(statistics.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ine71f\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "SAKURA NETWORK");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(statistics.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
			add_location(h1, file, 8, 0, 131);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(statistics, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(statistics.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statistics.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(statistics, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Dashboard", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dashboard> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Statistics });
	return [];
}

class Dashboard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dashboard",
			options,
			id: create_fragment.name
		});
	}
}

export default Dashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLjAyYjRiODM3LmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
